plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")
    include implementation("com.electronwill.night-config:toml:${nightconfig_version}")
    include implementation("com.electronwill.night-config:core:${nightconfig_version}")
    include implementation("blue.endless:jankson:${jankson_version}")
    modImplementation("com.github.glitchfiend:TerraBlender-fabric:${minecraft_version}-${terrablender_version}")


    modImplementation ("com.github.CorgiTaco:databreaker:${databreaker_version}") {
        exclude module: "fabric-loader"
    }

    modImplementation "curse.maven:starlight-521783:3667443"
//    modImplementation "curse.maven:cyanide-543444:3538092"
}

loom {
    accessWidenerPath = project(":Common").file("src/main/resources/byg.aw")
    runs {
        def args = ["-DbygDev=true", "-DbygGenerateData=true"]

        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs(args)
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs(args)
        }
    }
}

processResources {
//    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching("${mod_id}.mixins.json") {
        expand "refmap_target": "${archivesBaseName}-"
    }
}

//tasks.withType(JavaCompile) {
//    source(project(":Common").sourceSets.main.allSource)
//}
tasks.withType(Javadoc) {
    failOnError false
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}
// Disable to build with gradle //TODO: Fix gradle + building w/ intellij
sourceSets {
    main {
        java {
//            srcDir 'src/main/java'
            srcDirs project(':Common').sourceSets.main.java.srcDirs
        }
        resources {
//            srcDir 'src/main/resources'
            srcDirs project(':Common').sourceSets.main.resources.srcDirs
        }
    }
}